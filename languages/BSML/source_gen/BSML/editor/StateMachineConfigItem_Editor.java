package BSML.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.core.base.editor.ColoredVerticalBarCell;
import java.awt.Color;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class StateMachineConfigItem_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_mlss0g_a(editorContext, node);
  }
  private EditorCell createCollection_mlss0g_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_mlss0g_a0(editorContext, node));
    editorCell.addEditorCell(this.createCustom_mlss0g_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "state-machine semantics");
    editorCell.setCellId("Constant_mlss0g_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCustom_mlss0g_b0(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<ColoredVerticalBarCell>() {
      public ColoredVerticalBarCell invoke() {
        return new ColoredVerticalBarCell(node, Color.gray, 0, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_mlss0g_b0");
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createCollection_mlss0g_a2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_b2a(editorContext, node));
    if (renderingCondition_mlss0g_a2c0(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_mlss0g_c2a(editorContext, node));
    }
    if (renderingCondition_mlss0g_a3c0(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_mlss0g_d2a(editorContext, node));
    }
    editorCell.addEditorCell(this.createCollection_mlss0g_e2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_f2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_g2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_h2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_i2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_j2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_k2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mlss0g_l2a(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_a2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_a2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a0c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b0c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a0c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Big-Step Maximality");
    editorCell.setCellId("Constant_mlss0g_a0c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b0c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("bigStepMaximality");
    provider.setNoTargetText("<no bigStepMaximality>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_bigStepMaximality");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_b2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_b2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a1c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b1c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a1c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Concurrency");
    editorCell.setCellId("Constant_mlss0g_a1c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b1c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("concurrency");
    provider.setNoTargetText("<no concurrency>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_concurrency");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_c2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_c2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a2c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b2c0(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_mlss0g_a2c0(SNode node, EditorContext editorContext) {
    return SPropertyOperations.hasValue(node, MetaAdapterFactory.getProperty(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512918588L, 0x58d666a51291858dL, "concurrency"), "1", "1");
  }
  private EditorCell createConstant_mlss0g_a2c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Preemption");
    editorCell.setCellId("Constant_mlss0g_a2c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b2c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("preemption");
    provider.setNoTargetText("<no preemption>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_preemption");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_d2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_d2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a3c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b3c0(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_mlss0g_a3c0(SNode node, EditorContext editorContext) {
    return SPropertyOperations.hasValue(node, MetaAdapterFactory.getProperty(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512918588L, 0x58d666a51291858dL, "concurrency"), "1", "1");
  }
  private EditorCell createConstant_mlss0g_a3c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Small-Step Consistency");
    editorCell.setCellId("Constant_mlss0g_a3c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b3c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("smallStepConsistency");
    provider.setNoTargetText("<no smallStepConsistency>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_smallStepConsistency");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_e2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_e2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a4c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b4c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a4c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "External Input Event");
    editorCell.setCellId("Constant_mlss0g_a4c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b4c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("externalInEvent");
    provider.setNoTargetText("<no externalInEvent>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_externalInEvent");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_f2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_f2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a5c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b5c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a5c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Input Event Lifeline");
    editorCell.setCellId("Constant_mlss0g_a5c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b5c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("inEventLifeline");
    provider.setNoTargetText("<no inEventLifeline>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_inEventLifeline");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_g2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_g2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a6c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b6c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a6c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Internal Event Lifeline");
    editorCell.setCellId("Constant_mlss0g_a6c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b6c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("internalEventLifeline");
    provider.setNoTargetText("<no internalEventLifeline>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_internalEventLifeline");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_h2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_h2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a7c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b7c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a7c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "External Output Event");
    editorCell.setCellId("Constant_mlss0g_a7c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b7c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("externalOutEvent");
    provider.setNoTargetText("<no externalOutEvent>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_externalOutEvent");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_i2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_i2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a8c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b8c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a8c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Output Event Lifeline");
    editorCell.setCellId("Constant_mlss0g_a8c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b8c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("outEventLifeline");
    provider.setNoTargetText("<no outEventLifeline>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_outEventLifeline");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_j2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_j2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a9c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b9c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a9c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Guard Condition Memory Protocol");
    editorCell.setCellId("Constant_mlss0g_a9c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b9c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("GC");
    provider.setNoTargetText("<no GC>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_GC");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_k2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_k2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a01c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b01c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a01c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Right-Hand-Side Memory Protocol");
    editorCell.setCellId("Constant_mlss0g_a01c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b01c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("RHS");
    provider.setNoTargetText("<no RHS>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_RHS");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_l2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_l2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a11c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b11c0(editorContext, node));
    if (renderingCondition_mlss0g_a2l2a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_mlss0g_c11c0(editorContext, node));
    }
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_a11c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Priority");
    editorCell.setCellId("Constant_mlss0g_a11c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b11c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("priority");
    provider.setNoTargetText("<no priority>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_priority");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_mlss0g_c11c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mlss0g_c11c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mlss0g_a2l2a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_b2l2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_mlss0g_c2l2a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mlss0g_d2l2a(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_mlss0g_a2l2a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.hasValue(node, MetaAdapterFactory.getProperty(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512918588L, 0x58d666a5129185b7L, "priority"), "0", "0");
  }
  private EditorCell createConstant_mlss0g_a2l2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_mlss0g_a2l2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_b2l2a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("hierPrioRegion");
    provider.setNoTargetText("<no hierPrioRegion>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_hierPrioRegion");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_mlss0g_c2l2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "-");
    editorCell.setCellId("Constant_mlss0g_c2l2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mlss0g_d2l2a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("hierPrioScheme");
    provider.setNoTargetText("<no hierPrioScheme>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_hierPrioScheme");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
