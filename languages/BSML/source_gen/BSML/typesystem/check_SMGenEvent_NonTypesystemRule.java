package BSML.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import BSML.behavior.IEvent__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import com.mbeddr.core.base.behavior.IIdentifierNamedConcept__BehaviorDescriptor;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.core.base.behavior.IConfigurationContainer__BehaviorDescriptor;
import com.mbeddr.core.buildconfig.behavior.BCHelper;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class check_SMGenEvent_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_SMGenEvent_NonTypesystemRule() {
  }
  public void applyRule(final SNode smGenEvent, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ListSequence.fromList(SLinkOperations.getChildren(smGenEvent, MetaAdapterFactory.getContainmentLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294688eL, 0x58d666a5129adb46L, "actuals"))).count() != Sequence.fromIterable(IEvent__BehaviorDescriptor.args_id5zmpEki_82Q.invoke(SLinkOperations.getTarget(smGenEvent, MetaAdapterFactory.getReferenceLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294688eL, 0x58d666a5129adb48L, "event_ref")))).count()) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(smGenEvent, "wrong number of arguments: " + IIdentifierNamedConcept__BehaviorDescriptor.qualifiedName_id4JF77iuPCMH.invoke(SLinkOperations.getTarget(smGenEvent, MetaAdapterFactory.getReferenceLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294688eL, 0x58d666a5129adb48L, "event_ref"))), "r:1fccc51a-c6c0-4f4f-ba25-37a53ba8fbed(BSML.typesystem)", "6401416779522958475", null, errorTarget);
      }
    }
    if ((smGenEvent != null)) {
      SNode t = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(smGenEvent, MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512946891L, "BSML.structure.SMTrigger"), true, false), MetaAdapterFactory.getContainmentLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512946891L, 0x58d666a5129bed4eL, "sm_handle")));
      if (!((SNodeOperations.isInstanceOf(t, MetaAdapterFactory.getConcept(0x3bf5377ae9044dedL, 0x97545a516023bfaaL, 0x3e0cae5e366d630L, "com.mbeddr.core.pointers.structure.PointerType")))) || !((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(t, MetaAdapterFactory.getConcept(0x3bf5377ae9044dedL, 0x97545a516023bfaaL, 0x3e0cae5e366d630L, "com.mbeddr.core.pointers.structure.PointerType")), MetaAdapterFactory.getContainmentLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x6bbcdccef5e46755L, 0x6bbcdccef5e46756L, "baseType")), MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294687bL, "BSML.structure.SMType"))))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(smGenEvent, MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512946891L, "BSML.structure.SMTrigger"), true, false), MetaAdapterFactory.getContainmentLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512946891L, 0x58d666a5129bed4eL, "sm_handle")), "The type of " + SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(smGenEvent, MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512946891L, "BSML.structure.SMTrigger"), true, false), MetaAdapterFactory.getContainmentLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512946891L, 0x58d666a5129bed4eL, "sm_handle")) + " is " + t + ", not state-maochine handle", "r:1fccc51a-c6c0-4f4f-ba25-37a53ba8fbed(BSML.typesystem)", "6401416779522979371", null, errorTarget);
        }
      }
      SNode config = SNodeOperations.cast(IConfigurationContainer__BehaviorDescriptor.findItemOfType_id3R$6B6bL1DB.invoke(BCHelper.findBC(SNodeOperations.getModel(smGenEvent)), MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512918588L, "BSML.structure.StateMachineConfigItem").getDeclarationNode()), MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512918588L, "BSML.structure.StateMachineConfigItem"));
      SNode sm = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(t, MetaAdapterFactory.getConcept(0x3bf5377ae9044dedL, 0x97545a516023bfaaL, 0x3e0cae5e366d630L, "com.mbeddr.core.pointers.structure.PointerType")), MetaAdapterFactory.getContainmentLink(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x6bbcdccef5e46755L, 0x6bbcdccef5e46756L, "baseType")), MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294687bL, "BSML.structure.SMType")), MetaAdapterFactory.getReferenceLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294687bL, 0x58d666a51294687cL, "sm_ref"));
      if ((SLinkOperations.getTarget(smGenEvent, MetaAdapterFactory.getReferenceLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294688eL, 0x58d666a5129adb48L, "event_ref")) != null) && (!((ListSequence.fromList(SNodeOperations.getNodeDescendants(sm, MetaAdapterFactory.getInterfaceConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a5129468c0L, "BSML.structure.IEvent"), false, new SAbstractConcept[]{})).contains(SLinkOperations.getTarget(smGenEvent, MetaAdapterFactory.getReferenceLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294688eL, 0x58d666a5129adb48L, "event_ref"))))) || (SPropertyOperations.hasValue(config, MetaAdapterFactory.getProperty(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512918588L, 0x58d666a512918590L, "externalInEvent"), "1", "0") && !(((boolean) IEvent__BehaviorDescriptor.isInEvent_id5zmpEki_83s.invoke(SLinkOperations.getTarget(smGenEvent, MetaAdapterFactory.getReferenceLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294688eL, 0x58d666a5129adb48L, "event_ref")))))))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(smGenEvent, "Event " + IIdentifierNamedConcept__BehaviorDescriptor.qualifiedName_id4JF77iuPCMH.invoke(SLinkOperations.getTarget(smGenEvent, MetaAdapterFactory.getReferenceLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294688eL, 0x58d666a5129adb48L, "event_ref"))) + " is not an in-event defined in state machine " + IIdentifierNamedConcept__BehaviorDescriptor.qualifiedName_id4JF77iuPCMH.invoke(sm), "r:1fccc51a-c6c0-4f4f-ba25-37a53ba8fbed(BSML.typesystem)", "6401416779523051852", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294688eL, "BSML.structure.SMGenEvent");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
