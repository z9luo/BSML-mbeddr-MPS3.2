package BSML.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor mySMGlobalDeclaration__BehaviorDescriptor = new SMGlobalDeclaration__BehaviorDescriptor();
  private final BHDescriptor myAbstractBlock__BehaviorDescriptor = new AbstractBlock__BehaviorDescriptor();
  private final BHDescriptor myEndBigStepBlock__BehaviorDescriptor = new EndBigStepBlock__BehaviorDescriptor();
  private final BHDescriptor myEvent__BehaviorDescriptor = new Event__BehaviorDescriptor();
  private final BHDescriptor myEventCall__BehaviorDescriptor = new EventCall__BehaviorDescriptor();
  private final BHDescriptor myRegionLocalDeclaration__BehaviorDescriptor = new RegionLocalDeclaration__BehaviorDescriptor();
  private final BHDescriptor myStartBigStepBlock__BehaviorDescriptor = new StartBigStepBlock__BehaviorDescriptor();
  private final BHDescriptor myStateLocalDeclaration__BehaviorDescriptor = new StateLocalDeclaration__BehaviorDescriptor();
  private final BHDescriptor myTransition__BehaviorDescriptor = new Transition__BehaviorDescriptor();
  private final BHDescriptor myTriggerEventRef__BehaviorDescriptor = new TriggerEventRef__BehaviorDescriptor();
  private final BHDescriptor mySMGenEvent__BehaviorDescriptor = new SMGenEvent__BehaviorDescriptor();
  private final BHDescriptor myIEvent__BehaviorDescriptor = new IEvent__BehaviorDescriptor();
  private final BHDescriptor myIRegion__BehaviorDescriptor = new IRegion__BehaviorDescriptor();
  private final BHDescriptor myISMElementScopeProvider__BehaviorDescriptor = new ISMElementScopeProvider__BehaviorDescriptor();
  private final BHDescriptor myISMNamedElement__BehaviorDescriptor = new ISMNamedElement__BehaviorDescriptor();
  private final BHDescriptor myIState__BehaviorDescriptor = new IState__BehaviorDescriptor();
  private final BHDescriptor myITransition__BehaviorDescriptor = new ITransition__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[17];
    myConceptBehaviorIds[0] = 0x58d666a51294687eL;
    myConceptBehaviorIds[1] = 0x58d666a51294687fL;
    myConceptBehaviorIds[2] = 0x58d666a512946880L;
    myConceptBehaviorIds[3] = 0x58d666a512946882L;
    myConceptBehaviorIds[4] = 0x58d666a512946884L;
    myConceptBehaviorIds[5] = 0x58d666a512946886L;
    myConceptBehaviorIds[6] = 0x58d666a512946889L;
    myConceptBehaviorIds[7] = 0x58d666a51294688aL;
    myConceptBehaviorIds[8] = 0x58d666a51294688bL;
    myConceptBehaviorIds[9] = 0x58d666a51294688cL;
    myConceptBehaviorIds[10] = 0x58d666a51294688eL;
    myConceptBehaviorIds[11] = 0x58d666a5129468c0L;
    myConceptBehaviorIds[12] = 0x58d666a5129468c8L;
    myConceptBehaviorIds[13] = 0x58d666a5129468caL;
    myConceptBehaviorIds[14] = 0x58d666a5129468cbL;
    myConceptBehaviorIds[15] = 0x58d666a5129468ccL;
    myConceptBehaviorIds[16] = 0x58d666a5129468ceL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return mySMGlobalDeclaration__BehaviorDescriptor;
      case 1:
        return myAbstractBlock__BehaviorDescriptor;
      case 2:
        return myEndBigStepBlock__BehaviorDescriptor;
      case 3:
        return myEvent__BehaviorDescriptor;
      case 4:
        return myEventCall__BehaviorDescriptor;
      case 5:
        return myRegionLocalDeclaration__BehaviorDescriptor;
      case 6:
        return myStartBigStepBlock__BehaviorDescriptor;
      case 7:
        return myStateLocalDeclaration__BehaviorDescriptor;
      case 8:
        return myTransition__BehaviorDescriptor;
      case 9:
        return myTriggerEventRef__BehaviorDescriptor;
      case 10:
        return mySMGenEvent__BehaviorDescriptor;
      case 11:
        return myIEvent__BehaviorDescriptor;
      case 12:
        return myIRegion__BehaviorDescriptor;
      case 13:
        return myISMElementScopeProvider__BehaviorDescriptor;
      case 14:
        return myISMNamedElement__BehaviorDescriptor;
      case 15:
        return myIState__BehaviorDescriptor;
      case 16:
        return myITransition__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
