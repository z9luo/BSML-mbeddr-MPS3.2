package BSML.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class check_SMFunctionAttribute_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_SMFunctionAttribute_NonTypesystemRule() {
  }
  public void applyRule(final SNode function, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (AttributeOperations.getAttribute(function, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512946888L, "BSML.structure.SMFunctionAttribute"))) != null) {
      Iterable<SNode> deref_assigns = ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(function, MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, 0x3a16e3a9c7ad9954L, "body")), MetaAdapterFactory.getConcept(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x4e85add925440dL, "com.mbeddr.core.expressions.structure.AssignmentExpr"), false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x7af69e2e83a1ba34L, 0x7af69e2e83a1ba40L, "left")), MetaAdapterFactory.getConcept(0x3bf5377ae9044dedL, 0x97545a516023bfaaL, 0x3e0cae5e366e2a7L, "com.mbeddr.core.pointers.structure.DerefExpr"), true, new SAbstractConcept[]{})).isNotEmpty() || ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0x61c69711ed614850L, 0x81d97714ff227fb0L, 0x7af69e2e83a1ba34L, 0x7af69e2e83a1ba40L, "left")), MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x5bbe8a6d23a20aeaL, "com.mbeddr.core.modules.structure.GlobalVarRef"), true, new SAbstractConcept[]{})).isNotEmpty();
        }
      });
      if (Sequence.fromIterable(deref_assigns).isNotEmpty()) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(Sequence.fromIterable(deref_assigns).first(), "A state-machine function cannot have pointer deref on Left-hand-side", "r:1fccc51a-c6c0-4f4f-ba25-37a53ba8fbed(BSML.typesystem)", "5336752275648798165", null, errorTarget);
        }
      }
      Iterable<SNode> f = ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(function, MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, 0x3a16e3a9c7ad9954L, "body")), MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x52941adca601b38cL, "com.mbeddr.core.modules.structure.FunctionCall"), false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x52941adca601b38cL, 0x52941adca601b38dL, "function")), MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b933dL, "com.mbeddr.core.modules.structure.Module"), false, false) == SNodeOperations.getNodeAncestor(function, MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b933dL, "com.mbeddr.core.modules.structure.Module"), false, false) && (AttributeOperations.getAttribute(SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x52941adca601b38cL, 0x52941adca601b38dL, "function")), new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a512946888L, "BSML.structure.SMFunctionAttribute"))) == null);
        }
      });
      if (Sequence.fromIterable(f).isNotEmpty()) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(Sequence.fromIterable(f).first(), "A state-machine function cannot call non-state-machine function", "r:1fccc51a-c6c0-4f4f-ba25-37a53ba8fbed(BSML.typesystem)", "5336752275648860444", null, errorTarget);
        }
      }
      Iterable<SNode> v = ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(function, MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, 0x3a16e3a9c7ad9954L, "body")), MetaAdapterFactory.getConcept(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x3a16e3a9c7ad96e6L, "com.mbeddr.core.statements.structure.LocalVariableDeclaration"), false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getBoolean(it, MetaAdapterFactory.getProperty(0xa9d696470840491eL, 0xbf392eb0805d2011L, 0x3a16e3a9c7ad96e6L, 0x394f433631987f7eL, "static"));
        }
      });
      if (Sequence.fromIterable(v).isNotEmpty()) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(Sequence.fromIterable(v).first(), "A state-machine function cannot contains usage of static variables", "r:1fccc51a-c6c0-4f4f-ba25-37a53ba8fbed(BSML.typesystem)", "5336752275648897847", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, "com.mbeddr.core.modules.structure.Function");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
