package BSML.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class EntryBlock_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_a5eoag_a(editorContext, node);
  }
  private EditorCell createCollection_a5eoag_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_a5eoag_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_a5eoag_a0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_a5eoag_b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_a5eoag_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "entry");
    editorCell.setCellId("Constant_a5eoag_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_a5eoag_b0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new EntryBlock_Editor.contentSingleRoleHandler_a5eoag_b0(node, MetaAdapterFactory.getContainmentLink(0x181cb8f23d5e4aa9L, 0xb8cd2e496087f7c8L, 0x58d666a51294687fL, 0x58d666a5129574e8L, "content"), editorContext);
    return provider.createCell();
  }
  private class contentSingleRoleHandler_a5eoag_b0 extends SingleRoleCellProvider {
    public contentSingleRoleHandler_a5eoag_b0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("content");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_content");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no content>";
    }
  }
}
