package BSML.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private final long[] myId2Index;
  private IntentionFactory[] myIntentions0;
  private IntentionFactory[] myIntentions1;
  private IntentionFactory[] myIntentions2;
  private IntentionFactory[] myIntentions3;
  private IntentionFactory[] myIntentions4;

  public IntentionsDescriptor() {
    myId2Index = new long[5];
    myId2Index[0] = 0x58d666a512946882L;
    myId2Index[1] = 0x58d666a51294688aL;
    myId2Index[2] = 0x58d666a51294688bL;
    myId2Index[3] = 0x58d666a51294688cL;
    myId2Index[4] = 0x595522006a5b97ddL;
  }

  @Override
  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SConceptId conceptId) {
    final int index = Arrays.binarySearch(myId2Index, conceptId.getIdValue());
    switch (index) {
      case 0:
        // Concept: Event 
        if (myIntentions0 == null) {
          myIntentions0 = new IntentionFactory[3];
          myIntentions0[0] = new AddEventBinding_Int_Intention();
          myIntentions0[1] = new ToggleInEvent_Intention();
          myIntentions0[2] = new ToggleRendezvous_Intention();
        }
        return Arrays.asList(myIntentions0);
      case 1:
        // Concept: StateLocalDeclaration 
        if (myIntentions1 == null) {
          myIntentions1 = new IntentionFactory[1];
          myIntentions1[0] = new ToggleStable_Intention();
        }
        return Arrays.asList(myIntentions1);
      case 2:
        // Concept: Transition 
        if (myIntentions2 == null) {
          myIntentions2 = new IntentionFactory[2];
          myIntentions2[0] = new removePriority_Intention();
          myIntentions2[1] = new addPriority_Intention();
        }
        return Arrays.asList(myIntentions2);
      case 3:
        // Concept: TriggerEventRef 
        if (myIntentions3 == null) {
          myIntentions3 = new IntentionFactory[1];
          myIntentions3[0] = new ToggleNegation_Intention();
        }
        return Arrays.asList(myIntentions3);
      case 4:
        // Concept: FunctionSignature 
        if (myIntentions4 == null) {
          myIntentions4 = new IntentionFactory[1];
          myIntentions4[0] = new ToggleQueryFUnctionAttr_Intention();
        }
        return Arrays.asList(myIntentions4);
      default:
        return null;
    }
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[8];
    rv[0] = new ToggleNegation_Intention();
    rv[1] = new removePriority_Intention();
    rv[2] = new addPriority_Intention();
    rv[3] = new ToggleStable_Intention();
    rv[4] = new AddEventBinding_Int_Intention();
    rv[5] = new ToggleInEvent_Intention();
    rv[6] = new ToggleRendezvous_Intention();
    rv[7] = new ToggleQueryFUnctionAttr_Intention();
    return Arrays.asList(rv);
  }
}
